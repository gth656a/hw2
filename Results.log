================
Testing HW2Bases
================

Testing strdtoi:
strdtoi(       654): Expected:      28E Result:      28E Correct:  true
strdtoi(2147483647): Expected: 7FFFFFFF Result: 7FFFFFFF Correct:  true
strdtoi(         0): Expected:        0 Result:        0 Correct:  true
strdtoi( 555555555): Expected: 211D1AE3 Result: 211D1AE3 Correct:  true

Testing strbtoi:
strbtoi(                              0): Expected:        0 Result:        0 Correct:  true
strbtoi(                           1011): Expected:        B Result:        0 Correct: false
strbtoi(                        1001000): Expected:       48 Result:        0 Correct: false
strbtoi(1111111111111111111111111111111): Expected: 7FFFFFFF Result:        0 Correct: false

Testing strxtoi:
strxtoi(       0): Expected:        0 Result:        0 Correct:  true
strxtoi(      32): Expected:       32 Result:       32 Correct:  true
strxtoi(  FEDCBA): Expected:   FEDCBA Result:   FEDCBA Correct:  true
strxtoi(7FFFFFFF): Expected: 7FFFFFFF Result: 7FFFFFFF Correct:  true

Testing itostrb:
itostrb(       0): Expected:                               0 Result:                               0 Correct:  true
itostrb(       E): Expected:                            1110 Result:                            1110 Correct:  true
itostrb(      2A): Expected:                          101010 Result:                          101010 Correct:  true
itostrb(7FFFFFFF): Expected: 1111111111111111111111111111111 Result: 1111111111111111111111111111111 Correct:  true

Testing itostrx:
itostrx(       0): Expected:        0 Result:          Correct: false
itostrx(      10): Expected:       10 Result:          Correct: false
itostrx(    FEED): Expected:     FEED Result:          Correct: false
itostrx(7FFFFFFF): Expected: 7FFFFFFF Result:          Correct: false

=====================
Testing HW2Operations
=====================

Testing setNibble:
setNibble(   0, 1, 0): Expected:    1 Result:    1 Correct:  true
setNibble(FFFF, 0, 0): Expected: FFF0 Result: FFF0 Correct:  true
setNibble(FFFF, 6, 1): Expected: FF6F Result: FF6F Correct:  true
setNibble(1312, E, 1): Expected: 13E2 Result: 13E2 Correct:  true
setNibble(   0, 8, 2): Expected:  800 Result:  800 Correct:  true
setNibble(3391, 2, 2): Expected: 3291 Result: 3291 Correct:  true
setNibble(1234, 4, 3): Expected: 4234 Result: 4234 Correct:  true
setNibble(DEEF, B, 3): Expected: BEEF Result: BEEF Correct:  true

Testing getShort:
getShort(10100202, 0): Expected:  202 Result:  202 Correct:  true
getShort(DEADBEEF, 0): Expected: BEEF Result: FFFFBEEF Correct: false
getShort(DEADBEEF, 1): Expected: DEAD Result: FFFFDEAD Correct: false
getShort(12345678, 1): Expected: 1234 Result: 1234 Correct:  true

Testing pack:
pack(1, 2, 3, 4): Expected: 1234 Result:    0 Correct: false
pack(B, E, E, F): Expected: BEEF Result:    0 Correct: false
pack(C, A, F, E): Expected: CAFE Result:    0 Correct: false
pack(A, A, A, A): Expected: AAAA Result:    0 Correct: false

Testing abs:
abs(    2110, 17): Expected:     2110 Result:        0 Correct: false
abs(    1236, 13): Expected:      DCA Result:        0 Correct: false
abs(3FFFFFFF, 31): Expected: 3FFFFFFF Result:        0 Correct: false
abs(7FFFFFFF, 31): Expected:        1 Result:        0 Correct: false

Testing xor:
xor(FF00FF00,   FF00FF): Expected: FFFFFFFF Result:        0 Correct: false
xor(12345678, 87654321): Expected: 95511559 Result:        0 Correct: false
xor(55555555, AAAA8888): Expected: FFFFDDDD Result:        0 Correct: false
xor(55555555, 33333333): Expected: 66666666 Result:        0 Correct: false

Testing powerOf2:
powerOf2(10000000): Expected:  true Result: false Correct: false
powerOf2(      A0): Expected: false Result: false Correct:  true
powerOf2(       8): Expected:  true Result: false Correct: false
powerOf2(80000000): Expected: false Result: false Correct:  true
powerOf2(       1): Expected:  true Result: false Correct: false
powerOf2(12345678): Expected: false Result: false Correct:  true
powerOf2(       0): Expected: false Result: false Correct:  true

====================
Testing HW2BitVector
====================

Testing set:
set( 0): Bits:        0 Expected:        1 Result:        0 Correct: false
set( 1): Bits:        1 Expected:        3 Result:        1 Correct: false
set( 2): Bits:        3 Expected:        7 Result:        3 Correct: false
set( 3): Bits:        7 Expected:        F Result:        7 Correct: false
set( 4): Bits:        F Expected:       1F Result:        F Correct: false
set( 5): Bits:       1F Expected:       3F Result:       1F Correct: false
set( 6): Bits:       3F Expected:       7F Result:       3F Correct: false
set( 7): Bits:       7F Expected:       FF Result:       7F Correct: false
set( 8): Bits:       FF Expected:      1FF Result:       FF Correct: false
set( 9): Bits:      1FF Expected:      3FF Result:      1FF Correct: false
set(10): Bits:      3FF Expected:      7FF Result:      3FF Correct: false
set(11): Bits:      7FF Expected:      FFF Result:      7FF Correct: false
set(12): Bits:      FFF Expected:     1FFF Result:      FFF Correct: false
set(13): Bits:     1FFF Expected:     3FFF Result:     1FFF Correct: false
set(14): Bits:     3FFF Expected:     7FFF Result:     3FFF Correct: false
set(15): Bits:     7FFF Expected:     FFFF Result:     7FFF Correct: false
set(16): Bits:     FFFF Expected:    1FFFF Result:     FFFF Correct: false
set(17): Bits:    1FFFF Expected:    3FFFF Result:    1FFFF Correct: false
set(18): Bits:    3FFFF Expected:    7FFFF Result:    3FFFF Correct: false
set(19): Bits:    7FFFF Expected:    FFFFF Result:    7FFFF Correct: false
set(20): Bits:    FFFFF Expected:   1FFFFF Result:    FFFFF Correct: false
set(21): Bits:   1FFFFF Expected:   3FFFFF Result:   1FFFFF Correct: false
set(22): Bits:   3FFFFF Expected:   7FFFFF Result:   3FFFFF Correct: false
set(23): Bits:   7FFFFF Expected:   FFFFFF Result:   7FFFFF Correct: false
set(24): Bits:   FFFFFF Expected:  1FFFFFF Result:   FFFFFF Correct: false
set(25): Bits:  1FFFFFF Expected:  3FFFFFF Result:  1FFFFFF Correct: false
set(26): Bits:  3FFFFFF Expected:  7FFFFFF Result:  3FFFFFF Correct: false
set(27): Bits:  7FFFFFF Expected:  FFFFFFF Result:  7FFFFFF Correct: false
set(28): Bits:  FFFFFFF Expected: 1FFFFFFF Result:  FFFFFFF Correct: false
set(29): Bits: 1FFFFFFF Expected: 3FFFFFFF Result: 1FFFFFFF Correct: false
set(30): Bits: 3FFFFFFF Expected: 7FFFFFFF Result: 3FFFFFFF Correct: false
set(31): Bits: 7FFFFFFF Expected: FFFFFFFF Result: 7FFFFFFF Correct: false

Testing clear:
clear(19): Bits: FFFFFFFF Expected: FFF7FFFF Result: FFFFFFFF Correct: false
clear(21): Bits: FFF7FFFF Expected: FFD7FFFF Result: FFF7FFFF Correct: false

Testing toggle:
toggle( 0): Bits: FFFFFFFF Expected: FFFFFFFE Result: FFFFFFFF Correct: false
toggle( 0): Bits: FFFFFFFE Expected: FFFFFFFF Result: FFFFFFFE Correct: false
toggle(12): Bits: ABCDEFFF Expected: ABCDFFFF Result: ABCDEFFF Correct: false
toggle(30): Bits: ABCDEFFF Expected: EBCDEFFF Result: ABCDEFFF Correct: false

Testing isSet:
isSet(20): Bits:   100000 Expected:  true Result: false Correct: false
isSet( 0): Bits: 55555555 Expected:  true Result: false Correct: false
isSet(31): Bits: 753A96CB Expected: false Result: false Correct:  true
isSet(32): Bits: FFFFFFFF Expected: false Result: false Correct:  true

Testing isClear:
isClear(20): Bits:   100000 Expected: false Result: false Correct:  true
isClear( 0): Bits: 55555555 Expected: false Result: false Correct:  true
isClear(31): Bits: 753A96CB Expected:  true Result: false Correct: false
isClear(32): Bits: FFFFFFFF Expected:  true Result: false Correct: false

Testing toString:
toString(): Bits:        0 Expected: 00000000000000000000000000000000 Result:                                  Correct: false
toString(): Bits: DEADBEEF Expected: 11011110101011011011111011101111 Result:                                  Correct: false
toString(): Bits:     F569 Expected: 00000000000000001111010101101001 Result:                                  Correct: false
toString(): Bits: FFFFFF0F Expected: 11111111111111111111111100001111 Result:                                  Correct: false
toString(): Bits: FFAF7FFF Expected: 11111111101011110111111111111111 Result:                                  Correct: false

Testing onesCount:
onesCount(): Bits: FFFFFFFF Expected: 32 Result:  0 Correct: false
onesCount(): Bits:        0 Expected:  0 Result:  0 Correct:  true
onesCount(): Bits: 5555FFFF Expected: 24 Result:  0 Correct: false
onesCount(): Bits: 87654321 Expected: 13 Result:  0 Correct: false

Testing zerosCount:
zerosCount(): Bits: FFFFFFFF Expected:  0 Result:  0 Correct:  true
zerosCount(): Bits:        0 Expected: 32 Result:  0 Correct: false
zerosCount(): Bits: 5555FFFF Expected:  8 Result:  0 Correct: false
zerosCount(): Bits: 87654321 Expected: 19 Result:  0 Correct: false

Testing size:
size(): Bits: FFFFFFF0 Expected: 32 Result:  0 Correct: false
size(): Bits: 1F4CAB04 Expected: 29 Result:  0 Correct: false
size(): Bits:        0 Expected:  1 Result:  0 Correct: false
size(): Bits:     7569 Expected: 15 Result:  0 Correct: false
